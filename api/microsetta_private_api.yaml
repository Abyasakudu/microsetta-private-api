# Note that in reality essentially all of these functions would require oath security, but it makes them hard to test
# through the swagger web ui (as you have to send the authorization header, I don't yet know how to do from there...?)
# so only /account get has oath implemented.
openapi: 3.0.0
info:
  description: Private Microsetta RESTful API
  version: "0.3.0-oas3"
  title: Private Microsetta RESTful API (OAS 3.0)
servers:
  - url: 'http://localhost:8082/api'
paths:
  '/accounts':
    # NB: Not including a get: seems like seeing all accounts is an extension for the future (for admin?)
    post:
      operationId: implementation.register_account
      tags:
        - Account
      summary: Register new user account
      description: Register new user account
      requestBody:
        content:
          application/json:
              schema:
                type: object
                properties:
                  first_name:
                    $ref: '#/components/schemas/first_name'
                  last_name:
                    $ref: '#/components/schemas/last_name'
                  email:
                    $ref: '#/components/schemas/email'
                  address:
                    $ref: '#/components/schemas/address'
                  account_type:
                    $ref: '#/components/schemas/account_type'
                  kit_name:
                    $ref: '#/components/schemas/kit_name'
                  kit_password:
                    $ref: '#/components/schemas/kit_password'
      responses:
        '201':
          description: Successfully registered new user account
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}':
    get:
      operationId: implementation.read_account
      tags:
        - Account
      summary: Get user account information
      description: Get user account information
      parameters:
        - $ref: '#/components/parameters/acct_id'
      responses:
        '200':
          description: Successfully returned account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - Oauth2Scheme:
            - uid
    put:
      operationId: implementation.update_account
      tags:
        - Account
      summary: Update user account information
      description: Update user account information
      parameters:
        - $ref: '#/components/parameters/acct_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  $ref: '#/components/schemas/first_name'
                last_name:
                  $ref: '#/components/schemas/last_name'
                email:
                  $ref: '#/components/schemas/email'
                address:
                  $ref: '#/components/schemas/address'
      responses:
        '200':
          description: Successfully updated user account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}/sources':
    get:
      operationId: implementation.read_sources
      tags:
        - Sources
      summary: Get sources associated with account, filtered by source type
      description: Get sources associated with account, filtered by source type
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_type'
      responses:
        '200':
          description: Successfully returned sources
          content:
            application/json:
              schema:
                type: array
                items:  # NB: return whole source objects, unless returning >5KB compressed data
                  oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              example:
                - source_name: "Ophelia Doe"
                  source_type: human
                  consent:
                    participant_name: "Ophelia Q. Doe"
                    participant_email: "nunnery@example.com"
                - source_name: "P. Doe"
                  source_type: human
                  consent:
                    participant_name: "Persephone Doe"
                    participant_email: "pomegranate@example.com"
                    parent_1_name: "Demeter Doe"
                    parent_2_name: "Zeus Doe"
                    deceased_parent: false
                    obtainer_name: "Hades Doe"
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: implementation.create_source
      tags:
        - Source
      summary: Create new source of a specific type
      description: Create new source of a specific type
      parameters:
        - $ref: '#/components/parameters/acct_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/human_source'
                - $ref: '#/components/schemas/nonhuman_source'
            examples:
              human_adult_source:
                $ref: '#/components/examples/human_adult_source'
              human_child_source:
                $ref: '#/components/examples/human_child_source'
              nonhuman_source:
                $ref: '#/components/examples/nonhuman_source'

      responses:
        '201':
          description: Successfully created new source
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source'
                human_child_source:
                  $ref: '#/components/examples/human_child_source'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}/sources/{source_id}':
    get:
      operationId: implementation.read_source
      tags:
        - Source
      summary: Get information about source
      description: Get information about source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Successfully returned source information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source'
                human_child_source:
                  $ref: '#/components/examples/human_child_source'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: implementation.update_source
      tags:
        - Source
      summary: Update information for source
      description: Update information for source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/human_source'
                - $ref: '#/components/schemas/nonhuman_source'
            examples:
              human_adult_source:
                $ref: '#/components/examples/human_adult_source'
              human_child_source:
                $ref: '#/components/examples/human_child_source'
              nonhuman_source:
                $ref: '#/components/examples/nonhuman_source'
      responses:
        '200':
          description: Successfully updated source information
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/human_source'
                  - $ref: '#/components/schemas/nonhuman_source'
              examples:
                human_adult_source:
                  $ref: '#/components/examples/human_adult_source'
                human_child_source:
                  $ref: '#/components/examples/human_child_source'
                nonhuman_source:
                  $ref: '#/components/examples/nonhuman_source'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      operationId: implementation.delete_source
      tags:
        - Source
      summary: Delete source
      description: Delete source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '204':
          description: Successfully deleted source
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
          # NB: This would be returned if source cannot be deleted bc has a sample assigned to it

  '/accounts/{acct_id}/sources/{source_id}/survey_templates':
    get:
      operationId: implementation.read_survey_templates
      tags:
        - Survey Templates
      summary: Get survey templates available to this source
      description: Get survey templates available to this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of survey templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  survey_template_id:
                    $ref: '#/components/schemas/survey_template_id'
                  survey_template_title:
                    $ref: '#/components/schemas/survey_template_title'
                  survey_template_version:
                    $ref: '#/components/schemas/survey_template_version'
                  survey_template_type:
                    $ref: '#/components/schemas/survey_template_type'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    # NB: No delete, put, or post for survey templates--can maybe expand to that for admin user in future

  '/accounts/{acct_id}/sources/{source_id}/survey_templates/{survey_template_id}':
    get:
      operationId: implementation.read_survey_template
      tags:
        - Survey Template
      summary: Get a particular survey template available to this source
      description: Get a particular survey template available to this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_template_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned a specific survey template
          content:
            application/json:
              schema:
                type: object
                properties:
                  survey_template_id:
                    $ref: '#/components/schemas/survey_template_id'
                  survey_template_title:
                    $ref: '#/components/schemas/survey_template_title'
                  survey_template_version:
                    $ref: '#/components/schemas/survey_template_version'
                  survey_template_type:
                    $ref: '#/components/schemas/survey_template_type'
                  survey_template_text:
                    $ref: '#/components/schemas/survey_template_text'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    # NB: No delete, put, or post for a particular survey template--can maybe expand to that for admin user in future

  '/accounts/{acct_id}/sources/{source_id}/surveys':
    # NB: "survey" refers to an instance of an answered survey. In contrast, the set of *questions* comprising a survey
    # is called a "survey template" (see elsewhere in this api)
    get:
      operationId: implementation.read_answered_surveys
      tags:
        - Surveys (By Source)
      summary: Get answered survey instances associated with source
      description: Get answered survey instances associated with source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      responses:
        '200':
          description: Successfully returned list of answered surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    survey_id:
                      $ref: '#/components/schemas/survey_id'
                    survey_template_title:
                      $ref: '#/components/schemas/survey_template_title'
                    survey_template_version:
                      $ref: '#/components/schemas/survey_template_version'
                    survey_template_type:
                      $ref: '#/components/schemas/survey_template_type'
                    # Wonder if someday we might want the date it was answered?
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: implementation.submit_answered_survey
      tags:
        - Survey (By Source)
      summary: Submit new answered survey
      description: Submit new answered survey
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/language_tag'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                survey_template_id:
                  $ref: '#/components/schemas/survey_template_id'
                survey_text:
                  $ref: '#/components/schemas/survey_text'
      responses:
        '201':
          description: Successfully submitted new answered survey
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}/sources/{source_id}/surveys/{survey_id}':
    get:
      operationId: implementation.read_answered_survey
      tags:
        - Survey (By Source)
      summary: Get information about an answered survey
      description: Get information about an answered survey
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/survey_id'
      responses:
        '200':
          description: Successfully returned information about answered survey
          content:
            application/json:
              schema:
                type: object
                properties:
                  survey_id:
                    $ref: '#/components/schemas/survey_id'
                  survey_template_title:
                    $ref: '#/components/schemas/survey_template_title'
                  survey_template_version:
                    $ref: '#/components/schemas/survey_template_version'
                  survey_template_type:
                    $ref: '#/components/schemas/survey_template_type'
                  survey_text:
                    $ref: '#/components/schemas/survey_text'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    # TODO: true?->NB: Getting the list of surveys a source *can* take is outside the scope of this api
    # NB: NO "put"--you shouldn't update an answered survey, but instead should take a new one
    # NB: Currently no delete ... can unassociate a survey from a sample but not delete the survey itself

  '/accounts/{acct_id}/sources/{source_id}/samples':
    get:
      operationId: implementation.read_sample_associations
      tags:
        - Samples
      summary: Get samples associated with this source
      description: Get samples associated with this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
      responses:
        '200':
          description: Successfully returned list of samples
          content:
            application/json:
              schema:
                type: array
                items:  # Returning full samples instead of just ids as their info won't be large
                  $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: implementation.associate_sample
      tags:
        - Sample
      summary: Associate an unassociated sample with this source
      description: Associate an unassociated sample with this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sample_id:
                  # NB: Getting the sample id to input here is outside the scope of this endpoint--see kits
                  $ref: '#/components/schemas/sample_id'
      responses:
        '201':
          description: Successfully associated sample with source
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}/sources/{source_id}/samples/{sample_id}':
    # NB: info about the sample--type, datetime, notes--does NOT exist *separate* from source association, so
    # it can only be read/updated/deleted in the context of a source association
    get:
      operationId: implementation.read_sample_association
      tags:
        - Sample
      summary: Get information about a sample associated with this source
      description:  Get information about a sample associated with this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Successfully returned sample information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      operationId: implementation.update_sample_association
      tags:
        - Sample
      summary: Update information about a sample associated with this source
      description:  Update information about a sample associated with this source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sample'
      responses:
        '200':
          description: Successfully updated sample information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          # NB: This error would cover the case where you can't update a sample's info bc we already received it
          $ref: '#/components/responses/422UnprocessableEntity'
    delete:
      tags:
        - Sample
      operationId: implementation.dissociate_sample
      summary: Dissociate a sample from a source
      description: Dissociate a sample from a source
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '204':
          description: Sample was dissociated from source
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          # NB: This error would cover the case where you can't dissociate it bc it was already processed
          $ref: '#/components/responses/422UnprocessableEntity'

  # NB: "surveys" is used as a path component in two different ways (here nested under sample and above nested
  # directly under source.  The dev team assessed this and decided this dual usage was not unacceptably confusing.
  '/accounts/{acct_id}/sources/{source_id}/samples/{sample_id}/surveys':
    get:
      operationId: implementation.read_answered_survey_associations
      tags:
        - Surveys (By Sample)
      summary: Get list of answered surveys associated with this sample
      description: Get list of answered surveys associated with this sample
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      responses:
        '200':
          description: Successfully returned list of answered surveys associated with this sample
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    survey_id:
                      $ref: '#/components/schemas/survey_id'
                    survey_template_title:
                      $ref: '#/components/schemas/survey_template_title'
                    survey_template_version:
                      $ref: '#/components/schemas/survey_template_version'
                    survey_template_type:
                      $ref: '#/components/schemas/survey_template_type'
                    # Wonder if someday we might want the date it was answered?
              example:
                - survey_id: 1a7697cc-e202-4397-b12c-ab7e6d23bebd
                  survey_template_title: "Food Frequency Questionnaire"
                  survey_template_version: "1.2"
                  survey_template_type: remote
                - survey_id: a302f47c-8090-4ecd-b92f-14331b2807d3
                  survey_template_title: "Dream Survey"
                  survey_template_version: "0.1"
                  survey_template_type: local
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
    post:
      operationId: implementation.associate_answered_survey
      tags:
        - Survey (By Sample)
      summary: Associate an answered survey with this sample
      description: Associate an answered survey with this sample
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                survey_id:
                  $ref: '#/components/schemas/survey_id'
      responses:
        '201':
          description: Successfully associated answered survey with sample
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  '/accounts/{acct_id}/sources/{source_id}/samples/{sample_id}/surveys/{survey_id}':
    # NB: I can't really see a way that this can be updated, or even viewed--the association simply exists or doesn't
    delete:
      tags:
        - Survey (By Sample)
      operationId: implementation.dissociate_answered_survey
      summary: Dissociate an answered survey from a sample
      description: Dissociate an answered survey from a sample
      parameters:
        - $ref: '#/components/parameters/acct_id'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/sample_id'
        - $ref: '#/components/parameters/survey_id'
      responses:
        '204':
          description: Answered survey was dissociated from sample
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/kits/':
    get:
      operationId: implementation.read_kit
      tags:
        - Kit Samples
      summary: Get list of samples in kit that are not assigned to a source
      description: Get list of samples in kit that are not assigned to a source
      parameters:
        - $ref: '#/components/parameters/kit_name'
        - $ref: '#/components/parameters/kit_password'
      responses:
        '200':
          description: Successfully returned list of unassigned samples
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sample'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'

  # TODO: Move this out of /api ?
  '/consent':
    get:
      operationId: implementation.consent_doc
      tags:
        - Consent
      summary: Retrieve consent forms for display to user
      description: Retrieve consent forms for display to user
      responses:
        '200':
          description: Consent form
          headers:
            Location:
              schema:
                type: string
          content:
            text/html:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'


components:
  parameters:
    # path parameters
    acct_id: # Can be referenced as '#/components/parameters/acct_id'
      name: acct_id
      in: path
      description: Unique id specifying a user account
      schema:
        type: string
        example: "11fabf81-7a77-411e-bb82-a3aa4d6cced2"
      required: true
    kit_id:
      name: kit_id
      in: path
      description: Unique internal id specifying a kit
      schema:
        type: string
        example: "c442f31d-fa17-4fd1-85e2-1f251d13ec26"
      required: true
    sample_id:
      name: sample_id
      in: path
      description: Unique id specifying a sample associated with a source
      schema:
        $ref: '#/components/schemas/survey_id'
      required: true
    survey_id:
      name: survey_id
      in: path
      description: Unique internal id specifying a particular answered survey
      schema:
        $ref: '#/components/schemas/survey_id'
      required: true
    survey_template_id:
      name: survey_template_id
      in: path
      description: Unique internal id specifying a particular survey template
      schema:
        $ref: '#/components/schemas/survey_template_id'
      required: true
    source_id:
      name: source_id
      in: path
      description: Unique id specifying a source
      schema:
        type: string
        example: "59688a9b-c664-4a0d-9125-ccdc04909c8e"
      required: true

    # query parameters
    kit_password:
      name: kit_password
      in: query
      description: User-facing code of kit
      schema:
        $ref: '#/components/schemas/kit_password'
      required: true
    kit_name:
      name: kit_name
      in: query
      description: User-facing id of kit
      schema:
        $ref: '#/components/schemas/kit_name'
      required: true
    language_tag:
      name: language_tag
      in: query
      description: 5-character code made up of ISO 639-1 two-character lower-ase language code (e.g., "es") separated
        by a hyphen from a two-character upper-case country code (e.g., "MX") for a complete code like "es-MX"
      schema:
        $ref: '#/components/schemas/language_tag'
      required: true
    source_type:
      name: source_type
      in: query
      description: Type of sample
      schema:
        $ref: '#/components/schemas/source_type'
      required: true
  responses:
    401Unauthorized:   # Can be referenced as '#/components/responses/401Unauthorized'
      description: Invalid or missing token.
    404NotFound:       # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
    422UnprocessableEntity:
      description: The instructions provided cannot be processed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # account section
    account_type: # e.g., regular user or admin--room to grow
      type: string
      enum: ["standard"]
      example: "standard"
    created_at:
      type: string
      format: date-time
      example: "2007-04-05T12:30-02:00"
    email:
      type: string
      format: email
      example: "janedoe@example.com"
    first_name:        # Can be referenced as '#/components/schemas/first_name'
      type: string
      example: "Jane"
    last_name:
      type: string
      example: "Doe"
    language_tag:
      type: string
      example: "en-US"
    updated_at:
      type: string
      format: date-time
      example: "2019-12-13T00:54:28.712Z"
    account:
      type: object
      properties:
        first_name:
          $ref: '#/components/schemas/first_name'
        last_name:
          $ref: '#/components/schemas/last_name'
        email:
          $ref: '#/components/schemas/email'
        address:
          $ref: '#/components/schemas/address'
        account_type:
          $ref: '#/components/schemas/account_type'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    address:   # taken from https://opensource.zalando.com/restful-api-guidelines/#address-fields
      description:
        an address of a location/destination
      type: object
      properties:
        street:
          description: |
            the full street address including house number and street name
          type: string
          example: 123 Main St. E., apt. 2
        city:
          description: |
            name of the city / locality
          type: string
          example: Springfield
        state:
          description: |
            state, province, or district
          type: string
          example: "ON"
        zip:
          description: |
            zip code or postal code
          type: string
          example: "K0H 9Z0"
        country_code:
          description: |
            the country code according to
            [iso-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
          type: string
          example: "CA" # NB: this is the country of *canada*, not the state of california
      required:
        # Note that state is NOT required as not all countries (e.g. New Zealand) include this in their addresses
        - street
        - city
        - zip
        - country_code

    # kit section
    kit_password:
      type: string
    kit_name:
      type: string
      example: "jb_qhxqe"

    # sample section
    sample_barcode:
      type: string
      example: "000038448"
    sample_datetime:
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
    sample_id:
      type: string
      example: "dae21127-27bb-4f52-9fd3-a2aa5eb5b86f"
    sample_notes:
      type: string
      example: "Oops, I dropped it"
    sample_site:
      type: string
      enum: ["", "Ear wax", "Forehead", "Fur", "Hair", "Left hand", "Left leg", "Mouth", "Nares", "Nasal mucus",
             "Please select...", "Right hand", "Right leg", "Stool", "Tears", "Torso", "Vaginal mucus", "Null"]
      example: "Stool"
    sample_locked:
      type: boolean
      example: true
    sample:
      type: object
      properties:
        sample_barcode:
          $ref: '#/components/schemas/sample_barcode'
        sample_site:
          $ref: '#/components/schemas/sample_site'
        sample_locked:
          $ref: '#/components/schemas/sample_locked'
        sample_datetime:
          $ref: '#/components/schemas/sample_datetime'
        sample_notes:
          $ref: '#/components/schemas/sample_notes'

    # source section
    adult_consent:
      type: object
      properties:
        participant_name:
          type: string
        participant_email:
          type: string
    child_consent:
      type: object
      properties:
        participant_name:
          type: string
        participant_email:
          type: string
        parent_1_name:
          type: string
        parent_2_name:
          type: string
        deceased_parent:
          type: boolean
        obtainer_name:
          type: string
      additionalProperties: false
    source_name:
      type: string
    source_type:
      type: string
      enum: [human, animal, environmental]
      example: human
    nonhuman_source:
      type: object
      properties:
        source_type:
          $ref: '#/components/schemas/source_type'
        source_name:
          $ref: '#/components/schemas/source_name'
      example:
        source_name: "office windowsill"
        source_type: environmental
      additionalProperties: false
    human_source:
      type: object
      properties:
        source_type:
          $ref: '#/components/schemas/source_type'
        source_name:
          $ref: '#/components/schemas/source_name'
        consent:
          oneOf:
            - $ref: '#/components/schemas/adult_consent'
            - $ref: '#/components/schemas/child_consent'
      additionalProperties: false

    # survey template section
    survey_template_id:
      type: string
      example: "e928f910-bf11-4cda-93b5-c34c8914b97f"
    survey_template_title:
      type: string
      example: "Personal Information"
    survey_template_type:
      type: string # someday could be an enum if we know choices
      example: "local"
    survey_template_version:
      type: number
      example: 0.1
    survey_template_text:
      # The contents of this string ARE structured, but their structure is not specified in THIS api.
      # Could be *either* vue-compatible json to be used to generate an HTML form OR
      # a customized link to direct to an external survey
      type: string
      example: '{ |
                  "groups": [ |
                    { |
                      "legend": "Personal Information", |
                      "fields": [ |
                        { |
                          "type": "select", |
                          "label": "Gender:", |
                          "model": "107", |
                          "id": "107", |
                          "inputName": "107", |
                          "featured": false, |
                          "visible": true, |
                          "disabled": false, |
                          "required": true, |
                          "multi": false, |
                          "default": null, |
                          "hint": null, |
                          "help": null, |
                          "validator": null, |
                          "validateDebounceTime": null, |
                          "styleClasses": null, |
                          "buttons": null, |
                          "attributes": null, |
                          "values": [
                            "Unspecified", |
                            "Male", |
                            "Female", |
                            "Other" |
                          ], |
                          "selectOptions": {} |
                        }, |
                        { |
                          "type": "input", |
                          "label": "Height:", |
                          "model": "108", |
                          "id": "108", |
                          "inputName": "108", |
                          "featured": false, |
                          "visible": true, |
                          "disabled": false, |
                          "required": true, |
                          "multi": false, |
                          "default": null, |
                          "hint": null, |
                          "help": null, |
                          "validator": "string", |
                          "validateDebounceTime": null, |
                          "styleClasses": null, |
                          "buttons": null, |
                          "attributes": null, |
                          "inputType": "text" |
                        } |
                      ] |
                    } |
                  ], |
                  "fields": null |
                }'

    # survey section
    survey_id:
      type: string
      example: "69f697cb-8e52-4a4f-8db2-efffcfa186a5"
    survey_text:
      # The contents of this string ARE structured, but their structure is not specified in THIS api.
      type: string
      example: '{ |
                    "1": "Omnivore", |
                                          "2": "No", |
                                          "3": "Never", |
                                          "4": "Never", |
                                          "5": "Daily", |
                                          "6": "No", |
                                          "107": "Female", |
                                          "108": "60", |
                                          "109": "inches", |
                                          "110": "Canada", |
                                          "111": "January", |
                                          "112": "1969", |
                                          "113": "120", |
                                          "114": "pounds", |
                                          "115": "44074", |
                                          "148": "United States", |
                                          "162": [ |
                                            "Exclude refined sugars" |
                                          ] |
                }'

    # error section
    Error: # Taken straight from https://swagger.io/docs/specification/describing-responses/
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  examples:
    human_adult_source:
      value:
        source_name: "Nell Doe"
        source_type: human
        consent:
          participant_name: "Nellie Doe"
          participant_email: "nell@example.com"
    human_child_source:
      value:
        source_name: "K. Doe"
        source_type: human
        consent:
          participant_name: "Kelly Doe"
          participant_email: "kd@kidsmail.com"
        parent_1_name: "Maman Doe"
        parent_2_name: "Pere Doe"
        deceased_parent: false
        obtainer_name: "Maman M. Doe"
    nonhuman_source:
      value:
        source_name: "Fluffy"
        source_type: animal

  securitySchemes:
    Oauth2Scheme:
      type: oauth2
      x-tokenInfoFunc: implementation.verify_and_decode_token
      flows:
        authorizationCode:
          authorizationUrl: 'https://example.com/oauth2/dialog' # dummy; replace with real
          tokenUrl: 'https://example.com/oauth2/token' # dummy; replace with real
          scopes:
            uid: Unique identifier of the user accessing the service.
