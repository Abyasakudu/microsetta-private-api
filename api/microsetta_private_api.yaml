# Loosely based off examples in https://realpython.com/flask-connexion-rest-api/#building-out-the-complete-api
# and associated file https://github.com/realpython/materials/blob/master/flask-connexion-rest/version_3/swagger.yml,
# but then auto-converted to OAS 3 from Swagger 2 using SwaggerHub's converter tool
#
# Note that in reality essentially all of these functions would require oath security, but it makes them hard to test
# through the swagger web ui (as you have to send the authorization header, I don't yet know how to do from there...?)
# so only /account get has oath implemented.
openapi: 3.0.0
info:
  description: Private Microsetta RESTful API
  version: "1.0.0-oas3"
  title: Private Microsetta RESTful API (OAS 3.0)
servers:
  - url: http://localhost:8082/api
paths:
  /account:
    get:
      operationId: implementation.read
      tags:
        - Account
      summary: Get account information for the user associated with the oauth2 access token
      description: Get account information for the user associated with the oauth2 access token
      responses:
        '200':
          description: Successfully returned account information
          content:
            application/json:
              schema:
                type: object
                properties:
                  fname:
                    type: string
                  lname:
                    type: string
                  consented:
                    type: boolean
        '401':
          description: Invalid or missing token
        '404':
          description: User not found
      security:
        - Oauth2Scheme:
            - uid
  /account/settings:
    get:
      operationId: implementation.read_settings
      tags:
        - Settings
      summary: Get settings for user account associated with the oauth2 access token
      description: Get settings user account associated with the oauth2 access token
      responses:
        '200':
          description: Successfully returned account settings information
          content:
            application/json:
              schema:
                type: object
                properties:
                  fname:
                    type: string
                  lname:
                    type: string
                  email:
                    type: string
        '401':
          description: Invalid or missing token
        '404':
          description: User not found
    put:
      operationId: implementation.set_settings
      tags:
        - Settings
      summary: Set settings for account associated with the user's API token
      description: Set settings for account associated with the user's API token
      parameters:
        - name: fname
          in: query
          description: First name of user
          required: true
          schema:
            type: string
        - name: lname
          in: query
          description: Last name of user
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: User's email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully set account settings information
          content:
            application/json:
              schema:
                type: object
                properties:
                  fname:
                    type: string
                  lname:
                    type: string
                  email:
                    type: string
        '401':
          description: Invalid or missing token
        '404':
          description: User not found
  '/account/kit/{kit_id}':
    get:
      operationId: implementation.check_verified
      tags:
        - Kit
      summary: Check if kit is registered
      description: Check if kit is registered
      parameters:
        - name: kit_id
          in: path
          description: Id of kit to check if kit is verified
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: >-
            Successfully checked if kit is verified; see response for
            verification status
          content:
            application/json:
              schema:
                properties:
                  kit_id:
                    type: integer
                  is_verified:
                    type: boolean
        '401':
          description: Invalid or missing token
        '404':
          description: Kit id not found
    put:
      operationId: implementation.verify
      tags:
        - Kit
      summary: Verify kit
      description: Verify kit
      parameters:
        - name: kit_id
          in: path
          description: Id of kit to verify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully verified kit
          content:
            application/json:
              schema:
                properties:
                  kit_id:
                    type: integer
        '401':
          description: Invalid or missing token
        '404':
          description: Kit id not found
    post:
      operationId: implementation.register
      tags:
        - Kit
      summary: Register kit id to user account
      description: Register kit id to user account
      parameters:
        - name: kit_id
          in: path
          description: Id of kit to register
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: 'Successfully registered kit id, adding it to account''s kits'
        '401':
          description: Invalid or missing token
        '404':
          description: Kit id not found
  /sample:
    get:
      operationId: implementation.read_samples
      tags:
        - Sample
      summary: Get sample information associated with the account
      description: Get sample information associated with the account
      responses:
        '200':
          description: Successfully returned sample information
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    sample_id:
                      type: integer
                    collection_date:
                      type: string
                    status:
                      type: string
        '401':
          description: Invalid or missing token
        '404':
          description: User not found
    post:
      operationId: implementation.add_sample
      tags:
        - Sample
      summary: Add new sample to the associated account
      description: Add new sample to the associated account
      parameters:
        - name: sample_id
          in: query
          description: User-facing sample id
          required: true
          schema:
            type: integer
        - name: collection_date
          in: query
          description: Date of sample collection
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Sample status
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully added new sample
        '401':
          description: Invalid or missing token
        '403':
          description: Sample with provided id already exists
        '404':
          description: User not found
  '/sample/{sample_id}/status':
    put:
      operationId: implementation.set_sample_status
      tags:
        - Sample Status
      summary: Update sample status
      description: Update sample status
      parameters:
        - name: sample_id
          in: path
          description: Id of sample on which to update status
          required: true
          schema:
            type: integer
        - name: status
          in: path
          description: Status to be set
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated sample status
          content:
            application/json:
              schema:
                properties:
                  sample_id:
                    type: integer
                  status:
                    type: string
        '401':
          description: Invalid or missing token
        '404':
          description: Sample id not found

components:
  securitySchemes:
    Oauth2Scheme:
      type: oauth2
      x-tokenInfoFunc: implementation.verify_and_decode_token
      flows:
        authorizationCode:
          authorizationUrl: 'https://example.com/oauth2/dialog'
          scopes:
            uid: Unique identifier of the user accessing the service.